package com.example.itra;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

import com.musicg.api.ClapApi;
import com.musicg.wave.WaveHeader;

import android.speech.tts.TextToSpeech;
import android.support.v7.app.ActionBarActivity;
import android.content.Context;
import android.content.res.AssetFileDescriptor;
import android.content.res.AssetManager;
import android.media.AudioFormat;
import android.media.AudioRecord;
import android.media.AudioRecord.OnRecordPositionUpdateListener;
import android.media.MediaRecorder;
import android.media.MediaRecorder.AudioSource;
import android.os.Bundle;
import android.os.Environment;
import android.os.SystemClock;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.TextView;
import android.widget.Toast;


public class MainActivity extends ActionBarActivity {
	private long lastReadTime;
	private AudioRecord audioRecorder;
	private WaveHeader waveHeader;
	private ClapApi clapApi;
	public static short[] buffer; //+-32767 
	public int mSamplesRead; //how many samples read 
	boolean start;
	TextToSpeech ttobj;
	int sum , energy;
	private long burstOffset;
	private long bytesRead;
	private int buffSize = 16000;
	private short[][] buffers = new short[256][buffSize];
	int sampleRateInHz = 16000;
	int channelConfig,  audioFormat,  minimumBufferSize ;	
    TextView mrecorder;
    Context context;
    

	int count = 0;
    AssetManager am;
    boolean recorderStarted = false;
    private static final int SHORT_DELAY = 1000;
    ArrayList<Double> values ;
    
    Thread recordingThread , correlationThread;
    AudioRecord recorder;
    private int[] averages = new int[256];
    private int lastBuffer = 0;
    	 

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        
        setContentView(R.layout.activity_main);        
        context = getApplicationContext();
        
		Toast.makeText(context, "Welcome", Toast.LENGTH_SHORT).show();	
		
		 ttobj = new TextToSpeech(getApplicationContext(), new TextToSpeech.OnInitListener() {
			   @Override
			   public void onInit(int status) {
			   }
			}
			);
		
		 
		if (!recorderStarted ) { 
		
		  recordingThread = new Thread() {
	            @Override 
	            public void run() { 
	            	
	                int minBufferSize = AudioRecord.getMinBufferSize(16000, AudioFormat.CHANNEL_CONFIGURATION_MONO,
	                        AudioFormat.ENCODING_PCM_16BIT);
	                
	                recorder = new AudioRecord(AudioSource.MIC, 16000, AudioFormat.CHANNEL_CONFIGURATION_MONO,
	                        AudioFormat.ENCODING_PCM_16BIT, minBufferSize * 10);
	                
	                recorder.setPositionNotificationPeriod(buffSize);
	                
	               	
	                
	                recorder.setRecordPositionUpdateListener(new OnRecordPositionUpdateListener() { 
	                    
	                	
	                	
	                	
	                	
	                	@Override 
	                    public void onPeriodicNotification(AudioRecord recorder) {
	                		 
                        	 
	                        buffer = buffers[++lastBuffer % buffers.length];
	                       
	                        recorder.read(buffer, 0, buffSize);
	                        
	                        sum = 0; energy = 0;
	                       
	                        for (int i = 0; i < buffSize; ++i) {
	                            sum += Math.abs(buffer[i]);
	                            energy += Math.abs(buffer[i]*buffer[i]);	                            
	                        } 
	                        
	                        int average = (int) sum/buffSize ;
	                        energy = (int) energy/buffSize;
	                        
	                        Arrays.sort(buffer);
	                        int max= buffer[buffer.length-1];
	                     
	                        int feature = (int) max/average;
	                        System.out.println(feature + " " + energy + " "  + average);
	                        
	                        
	                        if (feature > 20 ) {
	                        
	                        		
	                        		
	                        	Toast.makeText(context, feature + " " + energy + " "  + average , Toast.LENGTH_SHORT).show();
	                       
	                        	 
	                        	  	 am = getAssets();
	                         try {
	                        	 /*
								InputStream fIn = am.open("template.txt");
								BufferedReader bReader = new BufferedReader( new InputStreamReader(fIn));
								values = new ArrayList<Double>();
							        Double line = bReader.readLine();
							        while (line != null) {
							            values.add(line);
							            line = bReader.readLine();
							        }
							        bReader.close();*/
	                        	 File srcFile = new File("ref.wav");
	                        	 FileInputStream in = new FileInputStream(srcFile);
	                             ObjectOutputStream output =  new ObjectOutputStream(new FileOutputStream("test.bin"));
	                             byte[] buf = new byte[80000];
	                             short[] shortArr = new short[buf.length/2];
	                             in.read(buf);
	                             for (int i = 0; i <buf.length/2 ; i++)
	                             {
	                                 output.writeShort( (short)( ( buf[i*2] & 0xff )|( buf[i*2 + 1] << 8 ) ) );
	                                 shortArr[i] = ( (short)( ( buf[i*2] & 0xff )|( buf[i*2 + 1] << 8 ) ) );
	                             }

	                             in.close();
							        
							        correlation(buffer,shortArr);
							} catch (IOException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
	                           
	                          
	                           
	                       
	                        
	                        
	                        } else{
	                        	 System.out.println(feature);	
	                        }
	                    } 
	 
	                    @Override 
	                    public void onMarkerReached(AudioRecord recorder) {
	                    	stopListenToMicrophone();
	                    } 
	                });          
	                
	                
	                
	                
	                    recorder.startRecording(); 
	                    short[] buffer = buffers[lastBuffer % buffers.length];
	                    recorder.read(buffer, 0, buffSize);
	                    while (true) { 
	                        if (isInterrupted()) {
	                            recorder.stop(); 
	                            recorder.release(); 
	                            break; 
	                       } 
	                   } 
	               } 
	           }; 
	                
	        recordingThread.start();	 
	        recorderStarted = true; 	        
	                                
	        }
	} 
    
    private void stopListenToMicrophone() { 
        if (recorderStarted) { 
            if (recordingThread != null && recordingThread.isAlive() && !recordingThread.isInterrupted()) {
                recordingThread.interrupt();
            } 
            recorderStarted = false; 
        } 
    } 
		
		
		
		 
		
  
    
    	
    	private void correlation(short[] buffer2, short[] shortArr) throws IOException {
  		
    		  int      i, j, c=0;
    		    double size = 0,  corr=0;

    		    ArrayList <Double> CorrArray=new ArrayList <Double>();

    		      
    		      
    		    	  for (int delay = 0; delay < shortArr.length; delay++) {
    		    		  corr = 0 ;
    		    		  for (i=0; i<buffer2.length; i++){
    		    			  corr += buffer2[i] *  shortArr[i];
    	    		      
    		    	  }
    		    	    }
    		    		  CorrArray.add( c,corr);
    		    		  c++;
    		    		  Double MaximumCoefficient = Collections.max(CorrArray);
    		    		  Double AverageCoefficient = CalculateAverage((CorrArray));
    		    		  Double feature = MaximumCoefficient/AverageCoefficient;
    		    		   if (feature > 20) {
    		    		  
    		    		  ttobj.speak("Started", TextToSpeech.QUEUE_FLUSH, null);
    		    		  
    		    		  }
    		  
    		     
				
    		
    		

    		
    		
    		
    	    
    		
		
	}

    	// Better use a `List`. It is more generic and it also receives an `ArrayList`.
    	public static double CalculateAverage(ArrayList<Double> corrArray) {
    	    // 'average' is undefined if there are no elements in the list.
    	    if (corrArray == null || corrArray.isEmpty())
    	        return 0.0;
    	    // Calculate the summation of the elements in the list
    	    long sum = 0;
    	    int n = corrArray.size();
    	    // Iterating manually is faster than using an enhanced for loop.
    	    for (int i = 0; i < n; i++)
    	        sum += corrArray.get(i);
    	    // We don't want to perform an integer division, so the cast is mandatory.
    	    return ((double) sum) / n;
    	}

		private void bytesRead(int read) {
    		if (read < 0)
    		return; 
    		long now = SystemClock.elapsedRealtime();
    		if (lastReadTime > 0) {
    		long dt = now - lastReadTime;
    		if (dt > 30) {
    		// assume that any read that takes >=30ms represents a hardware 
    		// buffer flush. 
    		// lets try to work out how big that buffer is so we can 
    		// estimate the record latency 
    		buffSize = (int) (bytesRead - burstOffset);
    		 
    		burstOffset = bytesRead;
    		} 
    		 
    		} 
    		 
    		bytesRead += read;
    		lastReadTime = now;
    		} 
    	
    	
    	
    	
    	

    

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();
        if (id == R.id.action_settings) {
            return true;
        }
        return super.onOptionsItemSelected(item);
    }
}
