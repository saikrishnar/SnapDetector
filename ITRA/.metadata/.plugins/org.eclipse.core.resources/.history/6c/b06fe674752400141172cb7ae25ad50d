package com.example.itra;
/* 
 * The application needs to have the permission to write to external storage 
 * if the output file is written to the external storage, and also the 
 * permission to record audio. These permissions must be set in the 
 * application's AndroidManifest.xml file, with something like: 
 * 
 * <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" /> 
 * <uses-permission android:name="android.permission.RECORD_AUDIO" /> 
 * 
 */  
 
import android.app.Activity;
import android.widget.LinearLayout;
import android.os.Bundle;
import android.os.Environment;
import android.view.ViewGroup;
import android.widget.Button;
import android.view.View;
import android.view.View.OnClickListener;
import android.content.Context;
import android.util.Log;
import android.media.MediaRecorder;
import android.media.MediaPlayer;
 
import java.io.IOException;
 
 
public class RecorderThread extends Activity
{ 
	private Thread recordingThread;
	private int bufferSize = 800;
	private short[][] buffers = new short[256][bufferSize];
	private int[] averages = new int[256];
	private int lastBuffer = 0;
	 
	protected void startListenToMicrophone() { 
	    if (!recorderStarted) { 
	 
	        recordingThread = new Thread() {
	            @Override 
	            public void run() { 
	                int minBufferSize = AudioRecord.getMinBufferSize(8000, AudioFormat.CHANNEL_CONFIGURATION_MONO,
	                        AudioFormat.ENCODING_PCM_16BIT);
	                recorder = new AudioRecord(AudioSource.MIC, 8000, AudioFormat.CHANNEL_CONFIGURATION_MONO,
	                        AudioFormat.ENCODING_PCM_16BIT, minBufferSize * 10);
	                recorder.setPositionNotificationPeriod(bufferSize);
	                recorder.setRecordPositionUpdateListener(new OnRecordPositionUpdateListener() { 
	                    @Override 
	                    public void onPeriodicNotification(AudioRecord recorder) {
	                        short[] buffer = buffers[++lastBuffer % buffers.length];
	                        recorder.read(buffer, 0, bufferSize);
	                        long sum = 0;
	                        for (int i = 0; i < bufferSize; ++i) {
	                            sum += Math.abs(buffer[i]);
	                        } 
	                        averages[lastBuffer % buffers.length] = (int) (sum / bufferSize);
	                        lastBuffer = lastBuffer % buffers.length;
	                    } 
	 
	                    @Override 
	                    public void onMarkerReached(AudioRecord recorder) {
	                    } 
	                }); 
	                recorder.startRecording(); 
	                short[] buffer = buffers[lastBuffer % buffers.length];
	                recorder.read(buffer, 0, bufferSize);
	                while (true) { 
	                    if (isInterrupted()) {
	                        recorder.stop(); 
	                        recorder.release(); 
	                        break; 
	                    } 
	                } 
	            } 
	        }; 
	        recordingThread.start();
	 
	        recorderStarted = true; 
	    } 
	} 
	 
	private void stopListenToMicrophone() { 
	    if (recorderStarted) { 
	        if (recordingThread != null && recordingThread.isAlive() && !recordingThread.isInterrupted()) {
	            recordingThread.interrupt();
	        } 
	        recorderStarted = false; 
	    } 
	} 
 
  
 
   
} 